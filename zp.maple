module ZpElem()
  option object(FieldElem);
  local value := 0;
  local p:=2;

  export ModuleCopy::static := proc(new::ZpElem, proto::ZpElem, k::integer, primo::integer)
    new:-value := k;
    new:-p:=primo;
  end proc;

  export ModuleApply::static := proc( )
    Object( ZpElem, _passed );
  end proc;

  export toInt::static := proc( z::ZpElem, $ )
    z:-value;
  end proc;

  export ModulePrint::static := proc( z::ZpElem )
    z:-value;
  end proc;

  `+`::static := proc( z1::ZpElem, z2::ZpElem )
    if z1:-p<>z2:-p then error "los elementos no pertenecen al mismo cuerpo" end if;
    ZpElem( z1:-value + z2:-value mod z:-p);
  end proc;

  neg::static := proc( z::ZpElem)
    ZpElem(z:-p - z:-value);
  end proc;

  `*`::static := proc( z1::ZpElem, z2::ZpElem )
    if z1:-p<>z2:-p then error "los elementos no pertenecen al mismo cuerpo" end if;
    ZpElem( z1:-value * z2:-value mod z:-p);
  end proc;

  inverse::static := proc( z::ZpElem)
    _ := igcdex(z:-value, z:-p,'s','t');
    s mod z:-p;
  end proc;

  exp::static := proc(z::ZpElem, n::integer)
    if n<0 then error "invalid input";
    ZpElem( z:-value^n mod z:-p);
  end proc;

  `^`::static := overload([exp,FieldElem:-`^`]);
end module: