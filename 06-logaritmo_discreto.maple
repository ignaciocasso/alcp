
# Algoritmo para calcular el logaritmo discreto en base g de y en un cuerpo finito, donde g es un elemento primitivo del cuerpo (genera su grupo multiplicativo).

# Separamos los elementos de Fq en 3 conjuntos de tamaño parecido y definimos las sucesiones ri,ai,bi, cuya función sucesor
# depende del conjunto al que pertenezaca ri. La sucesión cumple el invariante ri = y^ai * g^bi, y por cómo está construido
# se comporta como un random walk y se espera encontrar un r[i] = r[2*i] en sqrt(q) pasos (a saber por qué).

# En esas circunstancias tenemos que y^m = g^n, con m=ai-a2i mod (q-1), n=b2i-bi mod (q-1).
# Si por otro lado tenemos que g^x = y, entonces g^mx = g^n, y tenemos que mx = n mod ord(g) => mx = n mod (q-1)     (ord(g) = q-1).
# Por lo tanto el logaritmo es una de las soluciones a mz = n mod (q-1) 

logaritmo := proc(g,y,p,k,alpha)
    local q,r0,a0,b0,ri,ai,bi,r2i,a2i,b2i,set,j,m,n,d,candidato,f,i,s,t,x0,rnd;
    q := p^k;
    ri := 1;
    r2i := 1;
    ai := 0;
    a2i := 0;
    bi := 0;
    b2i := 0;
    rnd := rand(0..2);
    f := proc(r,a,b)
        # j := iquo(r,(iquo(q,3)));
        # j := coeff(r,alpha,k-1) mod 3;
        j := rnd();
        if j=2 then
            return Expand(y*r) mod p, a+1 mod (q-1), b;
        elif j=1 then
            return Expand(r*r) mod p, 2*a mod (q-1), 2*b mod (q-1);
        else
            return Expand(g*r) mod p, a, b+1 mod (q-1);
        end;
    end proc;
    i := 0;
    while (ri<>r2i or i=0) and i<p^k do
        ri,ai,bi := f(ri,ai,bi);
        #print(ri);
        r2i,a2i,b2i := f(f(ri,ai,bi));
        i := i+1;
    end do;
    if ri<>r2i then
        print("Random walk abortado tras 10000 iteraciones, tal vez no sea tan random y sea cíclico");
        return;
    end;
    m := ai-a2i mod (q-1);
    n := b2i-bi mod (q-1);
    if m=0 then
        print("La ecuación obtenida es ínutil, hay que usar un pseudo-random walk distinto");
        return;
    end;
    # resolvemos la ecuación mx=n mod q-1
    d := igcdex(m,q-1,s,t);
    if d=1 then
        return s*n mod (q-1);
    elif irem(n,d)<>0 then
        print("El logaritmo no tiene solución");
    else
        x0 := s*n/d mod ((q-1)/d);
        for i from 0 to d-1 do
            candidato := x0 +(q-1)*i/d   mod (q-1);
            if Expand(g^candidato) mod p = y then
                return candidato;
            end;
        end do;
    end;
end proc;