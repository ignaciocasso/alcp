

######## No funciona. No basta con la consideracion que se hace abajo para el caso de cuerpos con
#######  caracteristica no nula. mcd(f,f¡) no tiene porque ser prod gi^(i-1), ya que si i es multiplo
######   de p, gi divide a i*gi'






#algoritmo de yun para square free factorization

# La factorizacion libre de cuadrados de f en Fq[x] es (g1,...,gm), con f = prod gi^i, gm!=0, mcd(gi,gj)=1

# Base matematica del algoritmo:
# mcd(f,f') = prod gi^(i-1)
# w = f/c = prod gi
# y = f'/c = prod (i*gi'*prod(gj))       (j!=i)
# z = y - w' = prod((i-1)*gi'*prod(gj)) = g1*(...) (j!=i)
# mcd(w,z) = g1, y si f2=c=f/w entonces w2=w/g1 y y2=z/g1
# Se puede comprobar todo esto, pero es un coñazo

# f' podria ser 0 en un cuerpo de caracteristica 0, asi que hay que separar ese caso
# Por suerte, la unica forma de que eso pase es que todos los coeficientes de exponentes
# no multiplos de p sean nulos, asi que es facil de tratar (f = h^p para un polinomio h facil de calcular)


square_free := proc (f, p, k, x)
  local df, f2, sqf, i, ret, c, w, y, z, q, n,g;
  q := p^k;
  n := degree(f, n);
  df := derivative(f, x, p);
  if df = 0 then
    f2 := sum(coeff(f, x, p*i)*x^i, i = 0 .. iquo(n, p));
    sqf := square_free(f2, p, k, x);
    for i to iquo(n, p) do
      ret[p*i] := sqf[i]
    end do;
    return ret
  end if;
  i := 1;
  f2:=f;
  c := Gcd(f, df) mod p;
  w := Quo(f, c, x) mod p;
  y := Quo(df, c, x) mod p;
  z := derivative(w, x, p);
  z := y-z;
  while f2 <> 1 and i<5 do
    g := Gcd(w, z) mod p;
    print(g);
    #print(f2);
    #print(w);
    f2 := Quo(f2,w,x) mod p;
    print(f2);
    w := Quo(w, g, x) mod p;
    print(w);
    y := Quo(z, g, x) mod p;
    print(y);
    z := derivative(w, x, p);
    print(z);
    z := y-z;
    print(z);
    g||i := g;
    i := i+1;
  end do;
  return seq(g||j, j =1..i-1);
end proc;


dev := proc (f, x, p)
  local n := degree(f, x);
  return coeff(f, x, n)*n*x^(n-1) mod  p;
end proc;


derivative := proc (f, x, p)
  return map(collect(dev, [x]), f, x, p);
end proc;
