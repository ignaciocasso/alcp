
# Algoritmo para calcular la factorizacion libre de cuadrados de un polinomio en Fq[x]

# La factorizacion libre de cuadrados de f en Fq[x] es (g1,...,gm), con f = g1^1*...*gm^m y mcd(gi,gj)=1

# Algoritmo basico para caracteristica 0

  # f  = prod gi^i              
  # f' = sum( i*gi^(i-1)*gi'*prod(gj^j) ) = prod(gi^(i-1)) * sum(i*gi'*prod(gj)), j!=i

  # c1 = mcd(f,f') = prod( gi^(i-1) )   , i=1..m
  # w1 = f/c1 = prod(gi)                , i=1..m
  # y1 = gcd(w1,c1) = prod(gi)          , i=2..m
  # g1 = w1/y1
  # w2 = y1
  # c2 = c1/y1
  # ... 
  # wk = 1

# Problemas con caracteristica no nula

  # dev gi^i = i*g^(i-1)gi' puede ser 0 (si y solo si i es multiplo de p), y entonces gi^i | f' y mcd(f,f') ya no seria el mismo.
  # Si h=prod gi^i con p|i, entonces h|f'=> h|mcd(f,f'). Sin embargo, si se repiten los pasos de arriba se comprueba que
  # el algoritmo sigue funcionando parcialmente, la unica diferencia es que h siempre divide a ci y que mcd(h,wi) y mcd(h,yi) son
  # siempre 1. Los gi con i no multiplo de p se siguen obteniendo igual que antes y wi sigue convergiendo a 1, y cuando llega a 1
  # ci es h, y faltan por calcular esos factores. Pero si en h solo quedan coeficentes xa[pi]*x^pi, entonces existe
  # f2 = raiz_p(a[pi])*x^i tq h=f2^p, y se aplica el algoritmo recursivamente sobre f2

square_free := proc (f, p, k, x)
    local g,n,i,j,df,c,w,y,ret,f2,sqf,q;
    q := p^k;
    i := 1;
    df := derivative(f, x, p);
    c := Gcd(f,df) mod p;
    w := Quo(f,c,x) mod p;
    while w<>1 do
        y := Gcd(w,c) mod p;
        ret[i] := Quo(w, y, x) mod p;
        i := i+1;
        w := y;
        c := Quo(c,y,x) mod p;
    end do;
    if c<>1 then  #Coeficientes multiplos de p. Si df no fue 0 y c acabo en uno no hay ninguno
        n := degree(c, x);
        f2 := p_root_pol(c,x,p,k);
        sqf := square_free(f2, p, k, x);
        for i from i to nops(sqf)*p do
            ret[i] := 1;
        end do;
        for j from 1 to nops(sqf) do
            ret[p*j] := sqf[j];
        end do;
    end if;
    return [seq(ret[idx], idx=1..i-1)];
end proc;


dev := proc (f, x, p)
    local n := degree(f, x);
    return coeff(f, x, n)*n*x^(n-1) mod  p;
end proc;

derivative := proc (f, x, p)
    return map(dev,collect(f, [x]), x, p);
end proc;

p_root_pol := proc(f,x,p,k) #supone que el polinomio solo tiene coeficientes multiplos de p (condicion necesaria para que la raiz exista)
    local n,f2,i;
    n := degree(f,x);
    #f2 := sum( p_root(coeff(f, x, p*i),p,k)*x^i* , i = 0..iquo(n, p)); # Por algún motivo el primer i no es
    f2 := 0 mod p;                                                      #  visible, así que hat que usar el for
    for i from 0 to iquo(n,p) do
        f2 := f2 + p_root(coeff(f, x, p*i),p,k) * x^i;
    end do;
    return f2;
end proc;

p_root := proc(a,p,k)
    Power(a,p^(k-1)) mod p;
end proc;
  