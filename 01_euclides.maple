
# COMPROBAR QUE FUNCIONAN EN MAPLE Y EXTENDER A OTROS DOMINIOS EUCLIDEOS


######################### EUCLIDES #########################

# Algoritmo de euclides para los enteros. Para generalizarlo a dominios
# euclideos basta con sustituir irem y 0 por la funcion remainder() y
# el elemento zero del dominio euclideo (suponiendo que la division euclidea es computable
# en ese dominio, si no lo pues no hay nada que hacer)

# Explicacion del algoritmo

  # Es facil de comprobar que en un D.E mcd(a,b) = mcd(b,rem(a,b)), y por otro lado si phi es la funcion euclidea
  # del dominio tenemos que 0 <= phi(rem(a,b)) < phi(b). Por lo tanto podemos usar la igualdad anterior recursivamente
  # (o iterativamente en este caso), con la seguridad de que se llegara a un mcd(x,0), que por definicion es x. 

euclides := proc (a, b)
  local c, d, r;
  c := a; d := b;
  while d <> 0 do
    r := irem(c, d);
    c := d;
    d := r;
  end do;
  return c;
end proc;



######################## EUCLIDES UNICO ##################################


# Algoritmo de euclides con mcd unico para los enteros. Para generalizarlo a dominios
# euclideos, suponiendo ya generalizado euclides(), basta con sustituir abs() por la funcion
# normal_part() del dominio euclideo, si la tiene (si no pues no hay mcd unico, a no ser que
# el 1 sea la unica unidad)

# Explicacion
  
  # El mcd no tiene por que ser unico en un D.E, pero si que lo es modulo asociados (a y b son asociados si
  # (a|b y b|a <=> a=u*b, con u unidad). Si elegimos un representante para cada clase de equivalencia de la
  # relacion de asociacion, podemos definir el gcd como ese representante y hacerlo asi unico. Se llama parte_normal
  # de un elemento al representante de su clase.

euclides_unico := proc (a, b)
  local c, d, g;
  c := abs(a); d := abs(b); #no es estrictamente necesario, pero si en el libro lo hacen sera por algo
  g := euclides(c,d).
  return abs(c);
end proc;


####################### EUCLIDES EXTENDIDO ###################################

# algoritmo de euclides extendido para los enteros. Para generalizarlo a cualquier dominio euclideo
# basta con sustituir 0, iquo, -, * por el zero,quotient(),- y * del dominio euclideo, donde -
# es el operador binario ( a-b = a+(-b) )

# Explicacion

  # Hay un teorema que dice que si g = mcd(a,b), entonces existen s y t tq g = sa + bt. El algoritmo de euclides
  # extendido calcula esos s y t ademas de g. Lo que hace para ello es a√±adir algunas variables mas (c1,c2,d1yd2) y
  # algunas instrucciones mas para que a lo largo del bucle se cumpla el invariante c1*a+c2*b=c, d1*a+d2*b=d.
  # Cuando acaba el bucle y g=c, nos queda que s=c1 y t=c2

eea := proc (a, b)
  local c, c1, c2, d, d1, d2, q, r, r1, r2;
  c,c1,c2 := a,1,0;
  d,d1,d2 := b,0,1;
  while d <> 0 do
    q := iquo(c, d);
    r := c-q*d; r1 := c1-q*d1; r2 := c2-q*d2;
    c,c1,c2 := d,d1,d2;
    d,d1,d2 := r,r1,r2;
  end do;
  RETURN((c, c1, c2));
end proc;


####################### EUCLIDES EXTENDIDO UNICO ############################

# algoritmo de euclides extendido con mcd unico para los enteros. Para generalizarlo a cualquier dominio
# euclideo, suponiendo eea ya generalizado, basta con sustituir abs,sign,y / por las funciones
# normal_part(), unit_part() y / del dominio euclideo, si las tienen. Se usa / porque la division es exacta,
# ya que el segundo miembro es una unidad (a/b = a*inv(b) = quotient(a,b)), cualquiera de las 3 vale
# (es trivial comprobar que quotient es unico en este caso)


# Explicacion

  # Igual que antes el gcd no es unico, pero se puede hacer unico eligiendo un representante para cada clase de equiavlencia
  # de la relacion de asociados. Hay que tener cuidado para que se siga cumpliendo la identidad de Bezout, pero no tiene misterio
  # unit_part() es la unidad que cumple elem = normal_part(elem)*unit_part(elem);


eea_unico := proc (a, b)
  local a2 := abs(a);
  local b2 := abs(b);
  g,s,t := eea(a2,b2);
  s := s/(sign(a)*sign(g));
  t := t/(sign(b)*sign(g));
  RETURN((abs(g),s,t));
end proc;