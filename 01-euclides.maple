

######################### EUCLIDES #########################

# Algoritmo de euclides para cualquier dominio euclídeo, suponiendo conocidos zero y remainder

# Explicacion del algoritmo

  # Es facil de comprobar que en un D.E mcd(a,b) = mcd(b,rem(a,b)), y por otro lado si phi es la funcion euclidea
  # del dominio tenemos que 0 <= phi(rem(a,b)) < phi(b). Por lo tanto podemos usar la igualdad anterior recursivamente
  # (o iterativamente en este caso), con la seguridad de que se llegara a un mcd(x,0), que por definicion es x. 

euclides := proc (a, b)
  local c, d, r;
  c := a; d := b;
  while d <> zero do
    r := remainder(c, d);
    c := d;
    d := r;
  end do;
  return c;
end proc;



######################## EUCLIDES UNICO ##################################


# Algoritmo de euclides con mcd unico para cualquier dominio euclídeo

# Explicacion
  
  # El mcd no tiene por que ser unico en un D.E, pero si que lo es modulo asociados (a y b son asociados si
  # (a|b y b|a <=> a=u*b, con u unidad). Si elegimos un representante para cada clase de equivalencia de la
  # relacion de asociacion, podemos definir el gcd como ese representante y hacerlo asi unico. Se llama parte_normal
  # de un elemento al representante de su clase.

euclides_unico := proc (a, b)
  local c, d, g;
  c := normal_part(a); d := normal_part(b); #no es estrictamente necesario, pero si en el libro lo hacen sera por algo
  g := euclides(c,d);
  return normal_part(g);
end proc;


####################### EUCLIDES EXTENDIDO ###################################

# algoritmo de euclides extendido para cualquier dominio euclideo, suponiendo definidad las constantes zero y one y las funciones
# producto, resta, quotient

# Explicacion

  # Hay un teorema que dice que si g = mcd(a,b), entonces existen s y t tq g = sa + bt. El algoritmo de euclides
  # extendido calcula esos s y t ademas de g. Lo que hace para ello es añadir algunas variables más (c1,c2,d1yd2) y
  # algunas instrucciones más para que a lo largo del bucle se cumpla el invariante c1*a+c2*b=c, d1*a+d2*b=d.
  # Cuando acaba el bucle y g=c, nos queda que s=c1 y t=c2

eea := proc (a, b)
  local c, c1, c2, d, d1, d2, q, r, r1, r2,`&*`, `&-`;
  `&*` := (a,b) -> producto(a,b);
  `&-` := (a,b) -> resta(a,b);
  c,c1,c2 := a,one,zero;
  d,d1,d2 := b,zero,one;
  while d <> zero do
    q := quotient(c, d);
    r := c &- (q&*d); r1 := c1 &- (q&*d1); r2 := c2 - (q&*d2);
    c,c1,c2 := d,d1,d2;
    d,d1,d2 := r,r1,r2;
  end do;
  return c, c1, c2;
end proc;


####################### EUCLIDES EXTENDIDO UNICO ############################

# algoritmo de euclides extendido con mcd unico


# Explicacion

  # Igual que antes el gcd no es unico, pero se puede hacer unico eligiendo un representante para cada clase de equiavlencia
  # de la relacion de asociados. Hay que tener cuidado para que se siga cumpliendo la identidad de Bezout, pero no tiene misterio
  # unit_part() es la unidad que cumple elem = normal_part(elem)*unit_part(elem);


eea_unico := proc (a, b)
    local a2,b2,g,s,t;
    a2 := normal_part(a);
    b2 := normal_part(b);
    g,s,t := eea(a2,b2);
    s := quotient(s,unit_part(a)*unit_part(g));
    t := quotient(t,unit_part(b)*unit_part(g));
    return normal_part(g),s,t;
end proc;
